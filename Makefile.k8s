# LegalEase AI Kubernetes Deployment Makefile

# Default values
ENVIRONMENT ?= development
NAMESPACE ?= legalease-ai
HELM_RELEASE ?= legalease-ai
REGISTRY ?= 
TAG ?= latest

# Colors
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

.PHONY: help build push deploy clean status logs

help: ## Show this help message
	@echo "LegalEase AI Kubernetes Deployment Commands"
	@echo ""
	@echo "Usage: make [target] [ENVIRONMENT=env] [options]"
	@echo ""
	@echo "Targets:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "Variables:"
	@echo "  ENVIRONMENT   Target environment (development|staging|production)"
	@echo "  NAMESPACE     Kubernetes namespace (default: legalease-ai)"
	@echo "  HELM_RELEASE  Helm release name (default: legalease-ai)"
	@echo "  REGISTRY      Docker registry URL"
	@echo "  TAG           Docker image tag (default: latest)"
	@echo ""
	@echo "Examples:"
	@echo "  make build TAG=v1.0.0"
	@echo "  make deploy ENVIRONMENT=production"
	@echo "  make push REGISTRY=registry.example.com TAG=v1.0.0"

check-prereqs: ## Check if required tools are installed
	@echo "$(GREEN)[INFO]$(NC) Checking prerequisites..."
	@command -v kubectl >/dev/null 2>&1 || { echo "$(RED)[ERROR]$(NC) kubectl is required but not installed."; exit 1; }
	@command -v helm >/dev/null 2>&1 || { echo "$(RED)[ERROR]$(NC) helm is required but not installed."; exit 1; }
	@command -v docker >/dev/null 2>&1 || { echo "$(RED)[ERROR]$(NC) docker is required but not installed."; exit 1; }
	@kubectl cluster-info >/dev/null 2>&1 || { echo "$(RED)[ERROR]$(NC) Cannot connect to Kubernetes cluster."; exit 1; }
	@echo "$(GREEN)[INFO]$(NC) Prerequisites check passed"

build: check-prereqs ## Build Docker images
	@echo "$(GREEN)[INFO]$(NC) Building Docker images with tag: $(TAG)"
	@chmod +x scripts/build-images.sh
	@./scripts/build-images.sh -t $(TAG) $(if $(REGISTRY),-r $(REGISTRY))

push: check-prereqs ## Push Docker images to registry
	@echo "$(GREEN)[INFO]$(NC) Pushing Docker images to registry: $(REGISTRY)"
	@if [ -z "$(REGISTRY)" ]; then echo "$(RED)[ERROR]$(NC) REGISTRY variable is required"; exit 1; fi
	@chmod +x scripts/build-images.sh
	@./scripts/build-images.sh -r $(REGISTRY) -t $(TAG) -p

create-namespace: check-prereqs ## Create Kubernetes namespace
	@echo "$(GREEN)[INFO]$(NC) Creating namespace: $(NAMESPACE)"
	@kubectl create namespace $(NAMESPACE) --dry-run=client -o yaml | kubectl apply -f -

deploy-k8s: check-prereqs create-namespace ## Deploy using raw Kubernetes manifests
	@echo "$(GREEN)[INFO]$(NC) Deploying to Kubernetes using manifests..."
	@kubectl apply -f k8s/ -n $(NAMESPACE)
	@kubectl rollout status deployment/backend -n $(NAMESPACE)
	@kubectl rollout status deployment/frontend -n $(NAMESPACE)

deploy: check-prereqs create-namespace ## Deploy using Helm
	@echo "$(GREEN)[INFO]$(NC) Deploying to $(ENVIRONMENT) environment using Helm..."
	@chmod +x scripts/deploy.sh
	@./scripts/deploy.sh -e $(ENVIRONMENT) -n $(NAMESPACE) -r $(HELM_RELEASE) $(if $(REGISTRY),--registry $(REGISTRY))

deploy-with-build: build deploy ## Build images and deploy

deploy-with-push: push deploy ## Push images and deploy

upgrade: check-prereqs ## Upgrade existing Helm deployment
	@echo "$(GREEN)[INFO]$(NC) Upgrading Helm release: $(HELM_RELEASE)"
	@helm upgrade $(HELM_RELEASE) helm/legalease-ai/ \
		--namespace $(NAMESPACE) \
		--values helm/legalease-ai/values-$(ENVIRONMENT).yaml \
		--wait --timeout 10m

rollback: check-prereqs ## Rollback Helm deployment to previous version
	@echo "$(YELLOW)[WARNING]$(NC) Rolling back Helm release: $(HELM_RELEASE)"
	@helm rollback $(HELM_RELEASE) -n $(NAMESPACE)

status: check-prereqs ## Show deployment status
	@echo "$(GREEN)[INFO]$(NC) Deployment status for namespace: $(NAMESPACE)"
	@echo ""
	@echo "Pods:"
	@kubectl get pods -n $(NAMESPACE) -o wide
	@echo ""
	@echo "Services:"
	@kubectl get services -n $(NAMESPACE)
	@echo ""
	@echo "Ingress:"
	@kubectl get ingress -n $(NAMESPACE)
	@echo ""
	@echo "PVCs:"
	@kubectl get pvc -n $(NAMESPACE)

logs: check-prereqs ## Show logs for all pods
	@echo "$(GREEN)[INFO]$(NC) Showing logs for namespace: $(NAMESPACE)"
	@kubectl logs -l app.kubernetes.io/name=legalease-ai -n $(NAMESPACE) --tail=100

logs-backend: check-prereqs ## Show backend logs
	@kubectl logs -l app.kubernetes.io/component=backend -n $(NAMESPACE) --tail=100 -f

logs-frontend: check-prereqs ## Show frontend logs
	@kubectl logs -l app.kubernetes.io/component=frontend -n $(NAMESPACE) --tail=100 -f

logs-celery: check-prereqs ## Show Celery worker logs
	@kubectl logs -l app=celery-worker -n $(NAMESPACE) --tail=100 -f

shell-backend: check-prereqs ## Get shell access to backend pod
	@kubectl exec -it deployment/backend -n $(NAMESPACE) -- /bin/bash

shell-frontend: check-prereqs ## Get shell access to frontend pod
	@kubectl exec -it deployment/frontend -n $(NAMESPACE) -- /bin/sh

port-forward-backend: check-prereqs ## Port forward to backend service
	@echo "$(GREEN)[INFO]$(NC) Port forwarding backend service to localhost:8000"
	@kubectl port-forward service/backend 8000:8000 -n $(NAMESPACE)

port-forward-frontend: check-prereqs ## Port forward to frontend service
	@echo "$(GREEN)[INFO]$(NC) Port forwarding frontend service to localhost:3000"
	@kubectl port-forward service/frontend 3000:3000 -n $(NAMESPACE)

clean: check-prereqs ## Clean up deployment
	@echo "$(YELLOW)[WARNING]$(NC) Cleaning up deployment in namespace: $(NAMESPACE)"
	@read -p "Are you sure you want to delete all resources in $(NAMESPACE)? [y/N] " -n 1 -r; \
	echo ""; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		helm uninstall $(HELM_RELEASE) -n $(NAMESPACE) || true; \
		kubectl delete namespace $(NAMESPACE) || true; \
	fi

test: check-prereqs ## Run deployment tests
	@echo "$(GREEN)[INFO]$(NC) Running deployment tests..."
	@kubectl run test-pod --image=curlimages/curl:latest --rm -i --restart=Never -n $(NAMESPACE) -- \
		curl -f http://backend:8000/health || echo "$(RED)[ERROR]$(NC) Backend health check failed"

lint: ## Lint Helm charts
	@echo "$(GREEN)[INFO]$(NC) Linting Helm charts..."
	@helm lint helm/legalease-ai/

template: ## Generate Kubernetes manifests from Helm templates
	@echo "$(GREEN)[INFO]$(NC) Generating Kubernetes manifests from Helm templates..."
	@helm template $(HELM_RELEASE) helm/legalease-ai/ \
		--values helm/legalease-ai/values-$(ENVIRONMENT).yaml \
		--output-dir generated-manifests/

dry-run: check-prereqs ## Perform a dry run deployment
	@echo "$(GREEN)[INFO]$(NC) Performing dry run deployment..."
	@helm upgrade --install $(HELM_RELEASE) helm/legalease-ai/ \
		--namespace $(NAMESPACE) \
		--values helm/legalease-ai/values-$(ENVIRONMENT).yaml \
		--dry-run --debug