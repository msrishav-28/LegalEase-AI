version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: legalease-postgres
    environment:
      POSTGRES_DB: legalease_ai
      POSTGRES_USER: legalease_user
      POSTGRES_PASSWORD: legalease_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - legalease-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legalease_user -d legalease_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: legalease-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - legalease-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ for background task processing
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: legalease-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: legalease_user
      RABBITMQ_DEFAULT_PASS: legalease_password
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - legalease-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: legalease-backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://legalease_user:legalease_password@postgres:5432/legalease_ai
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://legalease_user:legalease_password@rabbitmq:5672/
      - SECRET_KEY=your-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - uploaded_files:/app/uploads
    networks:
      - legalease-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: legalease-celery-worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://legalease_user:legalease_password@postgres:5432/legalease_ai
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://legalease_user:legalease_password@rabbitmq:5672/
      - SECRET_KEY=your-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
    volumes:
      - ./backend:/app
      - uploaded_files:/app/uploads
    networks:
      - legalease-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: celery -A app.celery_app worker --loglevel=info

  # Frontend Next.js application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: legalease-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - legalease-network
    depends_on:
      - backend
    command: npm run dev

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: legalease-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - legalease-network
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  uploaded_files:

networks:
  legalease-network:
    driver: bridge