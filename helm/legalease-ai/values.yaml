# Default values for legalease-ai
# This is a YAML-formatted file.

global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: legalease-ai
  version: "1.0.0"

# Backend configuration
backend:
  enabled: true
  image:
    repository: legalease-ai/backend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 3
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "2000m"
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  livenessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 5
    periodSeconds: 5

# Frontend configuration
frontend:
  enabled: true
  image:
    repository: legalease-ai/frontend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70

# Celery worker configuration
celery:
  enabled: true
  worker:
    replicaCount: 2
    concurrency: 4
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "4Gi"
        cpu: "2000m"
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 8
      targetCPUUtilizationPercentage: 70
  
  beat:
    enabled: true
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    - host: legalease-ai.com
      paths:
        - path: /
          pathType: Prefix
          service: frontend
    - host: api.legalease-ai.com
      paths:
        - path: /
          pathType: Prefix
          service: backend
  
  tls:
    - secretName: legalease-tls
      hosts:
        - legalease-ai.com
        - api.legalease-ai.com

# Persistent storage
persistence:
  uploadedFiles:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteMany
    size: 50Gi

# PostgreSQL configuration (using Bitnami chart)
postgresql:
  enabled: true
  auth:
    postgresPassword: "legalease_password"
    username: "legalease_user"
    password: "legalease_password"
    database: "legalease_ai"
  
  image:
    repository: pgvector/pgvector
    tag: pg15
  
  primary:
    persistence:
      enabled: true
      size: 20Gi
    
    initdb:
      scripts:
        init.sql: |
          CREATE EXTENSION IF NOT EXISTS vector;

# Redis configuration (using Bitnami chart)
redis:
  enabled: true
  auth:
    enabled: false
  
  master:
    persistence:
      enabled: true
      size: 2Gi

# RabbitMQ configuration (using Bitnami chart)
rabbitmq:
  enabled: true
  auth:
    username: "legalease_user"
    password: "legalease_password"
  
  persistence:
    enabled: true
    size: 5Gi
  
  metrics:
    enabled: true

# Application secrets
secrets:
  secretKey: "your-secret-key-change-in-production"
  openaiApiKey: ""
  pineconeApiKey: ""
  pineconeEnvironment: ""

# Environment configuration
env:
  nodeEnv: "production"
  debug: false
  reload: false

# Service monitor for Prometheus
serviceMonitor:
  enabled: false
  namespace: monitoring
  interval: 30s
  scrapeTimeout: 10s

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network policies
networkPolicy:
  enabled: false

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000